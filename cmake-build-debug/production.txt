[start]::=<program>
<program>::=<importfile><paragraph>
<importfile>::='include''identifier'<importfile>
<importfile>::=''
<paragraph>::=''
<paragraph>::=<func><paragraph>
<paragraph>::=<decl><paragraph>
<func>::=<funcid>'('')'<block>
<func>::=<funcid>'('<funcparams>')''{'<blockitems>'}'
<btype>::='int'
<btype>::='double'
<btype>::='string'
<funcid>::='void''identifier'
<funcid>::=<btype>'identifier'
<funcparams>::=<funcparam><exrtaparam>
<exrtaparam>::=','<funcparam><exrtaparam>
<exrtaparam>::=''
<funcparam>::=<btype>'identifier'
<cfuncparams>::=<value><exparams>
<exparams>::=''
<exparams>::=','<value><exparams>
<block>::='{'<blockitems>'}'
<blockitems>::=''
<blockitems>::=<blockitem><blockitems>
<blockitem>::=<stmt>
<blockitem>::=<decl>
<stmt>::=<lval>'='<expression>';'
<stmt>::=<lval>'='<value>';'
<lval>::='identifier'
<lval>::='identifier''['<constexp>']'
<stmt>::=<expression>';'
<stmt>::=<block>
<stmt>::='if''('<cond>')'<stmt><elstmt>
<elstmt>::='else'<stmt>
<stmt>::='while''('<cond>')'<stmt>
<stmt>::='for''('<vardecl>';'<cond>';'<expression>')'
<stmt>::='break'';'
<stmt>::='continue'';'
<stmt>::='return'';'
<stmt>::='return'<expression>';'
<stmt>::='return'<value>';'
<stmt>::=<value>';'
<decl>::=<constdecl>';'
<decl>::=<vardecl>';'
<constdecl>::='s_const'<btype><constdefs>
<constdefs>::=<constdef><exconstdef>
<exconstdef>::=','<constdef><exconstdef>
<exconstdef>::=''
<constdef>::='identifier''='<initval>
<constdef>::='identifier''['<constexp>']''='<initvalsv>
<constexp>::=<expression>
<constexp>::=<value>
<vardecl>::=<btype><vardefs>
<vardefs>::=<vardef><exvardef>
<exvardef>::=','<vardef><exvardef>
<exvardef>::=''
<vardef>::=<constdef>
<vardef>::='identifier'
<initvalsv>::='{'<initvals>'}'
<initvalsv>::='{''}'
<initvals>::=<initval><extraiv>
<extraiv>::=','<initval><extraiv>
<extraiv>::=''
<initval>::=<expression>
<initval>::=<value>
<cond>::='true'
<cond>::='false'
<cond>::=<expression>
<value>::='('<expression>')'
<value>::='const'
<value>::='identifier'
<expression>::=<value>'operator'<value>
<value>::='identifier''('')'
<value>::='identifier''('<cfuncparams>')'
<expression>::='operator'<value>
<expression>::=<value>'operator'
